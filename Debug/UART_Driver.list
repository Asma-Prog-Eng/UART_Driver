
UART_Driver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000031c  08000194  08000194  00001194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080004b0  080004b8  000014b8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080004b0  080004b0  000014b8  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  080004b0  080004b0  000014b8  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  080004b0  080004b8  000014b8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080004b0  080004b0  000014b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080004b4  080004b4  000014b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000000  20000000  20000000  000014b8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000014b8  2**0
                  CONTENTS
 10 .bss          00000020  20000000  20000000  00002000  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000020  20000020  00002000  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000014b8  2**0
                  CONTENTS, READONLY
 13 .debug_info   00000600  00000000  00000000  000014e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000027c  00000000  00000000  00001ae8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000088  00000000  00000000  00001d68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000058  00000000  00000000  00001df0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00013a38  00000000  00000000  00001e48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00000d11  00000000  00000000  00015880  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00068d08  00000000  00000000  00016591  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0007f299  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000118  00000000  00000000  0007f2dc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000077  00000000  00000000  0007f3f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	@ (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000000 	.word	0x20000000
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08000498 	.word	0x08000498

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	@ (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	@ (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	@ (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000004 	.word	0x20000004
 80001d0:	08000498 	.word	0x08000498

080001d4 <main>:
#define GPIOBEN     (1UL << 18)
#define LED_PIN     (1UL << 7)

char key = '\0';

int main() {
 80001d4:	b580      	push	{r7, lr}
 80001d6:	af00      	add	r7, sp, #0


	UART2_init () ;
 80001d8:	f000 f836 	bl	8000248 <UART2_init>

	 // Enable clock access for Port B
    RCC->AHBENR |= GPIOBEN;
 80001dc:	4b17      	ldr	r3, [pc, #92]	@ (800023c <main+0x68>)
 80001de:	695b      	ldr	r3, [r3, #20]
 80001e0:	4a16      	ldr	r2, [pc, #88]	@ (800023c <main+0x68>)
 80001e2:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80001e6:	6153      	str	r3, [r2, #20]

    // set MODER bits for PB7 (bits 14 and 15) to output mode (01)
    GPIOB->MODER &= ~(1UL << 15);
 80001e8:	4b15      	ldr	r3, [pc, #84]	@ (8000240 <main+0x6c>)
 80001ea:	681b      	ldr	r3, [r3, #0]
 80001ec:	4a14      	ldr	r2, [pc, #80]	@ (8000240 <main+0x6c>)
 80001ee:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80001f2:	6013      	str	r3, [r2, #0]
    GPIOB->MODER |=  (1UL << 14);
 80001f4:	4b12      	ldr	r3, [pc, #72]	@ (8000240 <main+0x6c>)
 80001f6:	681b      	ldr	r3, [r3, #0]
 80001f8:	4a11      	ldr	r2, [pc, #68]	@ (8000240 <main+0x6c>)
 80001fa:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80001fe:	6013      	str	r3, [r2, #0]

	while (1) {


		key = uart2_read();
 8000200:	f000 f8c2 	bl	8000388 <uart2_read>
 8000204:	4603      	mov	r3, r0
 8000206:	461a      	mov	r2, r3
 8000208:	4b0e      	ldr	r3, [pc, #56]	@ (8000244 <main+0x70>)
 800020a:	701a      	strb	r2, [r3, #0]


		if (key == '1') {
 800020c:	4b0d      	ldr	r3, [pc, #52]	@ (8000244 <main+0x70>)
 800020e:	781b      	ldrb	r3, [r3, #0]
 8000210:	2b31      	cmp	r3, #49	@ 0x31
 8000212:	d106      	bne.n	8000222 <main+0x4e>

			GPIOB->ODR |= LED_PIN;   // Set PB7 high
 8000214:	4b0a      	ldr	r3, [pc, #40]	@ (8000240 <main+0x6c>)
 8000216:	695b      	ldr	r3, [r3, #20]
 8000218:	4a09      	ldr	r2, [pc, #36]	@ (8000240 <main+0x6c>)
 800021a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800021e:	6153      	str	r3, [r2, #20]
 8000220:	e7ee      	b.n	8000200 <main+0x2c>

	    }

		else {

			GPIOB->ODR &= ~LED_PIN;  // Set PB7 low
 8000222:	4b07      	ldr	r3, [pc, #28]	@ (8000240 <main+0x6c>)
 8000224:	695b      	ldr	r3, [r3, #20]
 8000226:	4a06      	ldr	r2, [pc, #24]	@ (8000240 <main+0x6c>)
 8000228:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800022c:	6153      	str	r3, [r2, #20]
			uart2_write(key);        // display the entered character on terminal
 800022e:	4b05      	ldr	r3, [pc, #20]	@ (8000244 <main+0x70>)
 8000230:	781b      	ldrb	r3, [r3, #0]
 8000232:	4618      	mov	r0, r3
 8000234:	f000 f88e 	bl	8000354 <uart2_write>
		key = uart2_read();
 8000238:	e7e2      	b.n	8000200 <main+0x2c>
 800023a:	bf00      	nop
 800023c:	40021000 	.word	0x40021000
 8000240:	48000400 	.word	0x48000400
 8000244:	2000001c 	.word	0x2000001c

08000248 <UART2_init>:
#define CR1_UE         (1U << 0)

#define SR_RXNE          (1U << 5)


void UART2_init (void) {
 8000248:	b580      	push	{r7, lr}
 800024a:	af00      	add	r7, sp, #0


	/***************************************Configure uart gpio pin*********************************************************/

	/* Enable clock access to gpio port A */
	RCC->AHBENR |= GPIOAEN;
 800024c:	4b3e      	ldr	r3, [pc, #248]	@ (8000348 <UART2_init+0x100>)
 800024e:	695b      	ldr	r3, [r3, #20]
 8000250:	4a3d      	ldr	r2, [pc, #244]	@ (8000348 <UART2_init+0x100>)
 8000252:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000256:	6153      	str	r3, [r2, #20]

	/* Set PA2 as AF7*/
	GPIOA->MODER &= ~(1UL << 4);
 8000258:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800025c:	681b      	ldr	r3, [r3, #0]
 800025e:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000262:	f023 0310 	bic.w	r3, r3, #16
 8000266:	6013      	str	r3, [r2, #0]
	GPIOA->MODER  |= (1UL << 5);
 8000268:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800026c:	681b      	ldr	r3, [r3, #0]
 800026e:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000272:	f043 0320 	orr.w	r3, r3, #32
 8000276:	6013      	str	r3, [r2, #0]


	/*Set PA2  alternate function type to UART_TX (AF07)*/

	GPIOA->AFR[0] |= (1U << 8) ;
 8000278:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800027c:	6a1b      	ldr	r3, [r3, #32]
 800027e:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000282:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000286:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |= (1U << 9) ;
 8000288:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800028c:	6a1b      	ldr	r3, [r3, #32]
 800028e:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000292:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000296:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |= (1U << 10) ;
 8000298:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800029c:	6a1b      	ldr	r3, [r3, #32]
 800029e:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 80002a2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80002a6:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] &= ~(1U << 11);
 80002a8:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80002ac:	6a1b      	ldr	r3, [r3, #32]
 80002ae:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 80002b2:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80002b6:	6213      	str	r3, [r2, #32]


	/* Set PA15 as AF7*/
	GPIOA->MODER &= ~(1UL << 30);
 80002b8:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80002bc:	681b      	ldr	r3, [r3, #0]
 80002be:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 80002c2:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80002c6:	6013      	str	r3, [r2, #0]
	GPIOA->MODER  |= (1UL << 31);
 80002c8:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80002cc:	681b      	ldr	r3, [r3, #0]
 80002ce:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 80002d2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80002d6:	6013      	str	r3, [r2, #0]

	/*Set PA15  alternate function type to UART_TX (AF07)*/

	GPIOA->AFR[1] |= (1U << 28) ;
 80002d8:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80002dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80002de:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 80002e2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80002e6:	6253      	str	r3, [r2, #36]	@ 0x24
	GPIOA->AFR[1] |= (1U << 29) ;
 80002e8:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80002ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80002ee:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 80002f2:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80002f6:	6253      	str	r3, [r2, #36]	@ 0x24
	GPIOA->AFR[1] |= (1U << 30) ;
 80002f8:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80002fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80002fe:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000302:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8000306:	6253      	str	r3, [r2, #36]	@ 0x24
	GPIOA->AFR[1] &= ~(1U << 31);
 8000308:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800030c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800030e:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000312:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8000316:	6253      	str	r3, [r2, #36]	@ 0x24

	/***************************************Configure uart module **********************************************************/

	/* Enable clock access to uart1 */
	RCC->APB1ENR |= UART2EN;
 8000318:	4b0b      	ldr	r3, [pc, #44]	@ (8000348 <UART2_init+0x100>)
 800031a:	69db      	ldr	r3, [r3, #28]
 800031c:	4a0a      	ldr	r2, [pc, #40]	@ (8000348 <UART2_init+0x100>)
 800031e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000322:	61d3      	str	r3, [r2, #28]

	/* Configure baudrate */
    uart_set_baudrate(USART2,APB2_CLK , UART_BAUDRATE );
 8000324:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000328:	4908      	ldr	r1, [pc, #32]	@ (800034c <UART2_init+0x104>)
 800032a:	4809      	ldr	r0, [pc, #36]	@ (8000350 <UART2_init+0x108>)
 800032c:	f000 f840 	bl	80003b0 <uart_set_baudrate>

	/* Configure the transfer direction*/
	USART2->CR1 = (CR1_TE | CR1_RE );
 8000330:	4b07      	ldr	r3, [pc, #28]	@ (8000350 <UART2_init+0x108>)
 8000332:	220c      	movs	r2, #12
 8000334:	601a      	str	r2, [r3, #0]



	/* Enable UART transmitter module */
	USART2->CR1 |= CR1_UE;
 8000336:	4b06      	ldr	r3, [pc, #24]	@ (8000350 <UART2_init+0x108>)
 8000338:	681b      	ldr	r3, [r3, #0]
 800033a:	4a05      	ldr	r2, [pc, #20]	@ (8000350 <UART2_init+0x108>)
 800033c:	f043 0301 	orr.w	r3, r3, #1
 8000340:	6013      	str	r3, [r2, #0]

}
 8000342:	bf00      	nop
 8000344:	bd80      	pop	{r7, pc}
 8000346:	bf00      	nop
 8000348:	40021000 	.word	0x40021000
 800034c:	007a1200 	.word	0x007a1200
 8000350:	40004400 	.word	0x40004400

08000354 <uart2_write>:



void uart2_write(int ch) {
 8000354:	b480      	push	{r7}
 8000356:	b083      	sub	sp, #12
 8000358:	af00      	add	r7, sp, #0
 800035a:	6078      	str	r0, [r7, #4]

	/* Wait until transmit buffer empty */

	while (!(USART2->ISR & SR_TXE)){}
 800035c:	bf00      	nop
 800035e:	4b09      	ldr	r3, [pc, #36]	@ (8000384 <uart2_write+0x30>)
 8000360:	69db      	ldr	r3, [r3, #28]
 8000362:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000366:	2b00      	cmp	r3, #0
 8000368:	d0f9      	beq.n	800035e <uart2_write+0xa>


	/* Write to transmit data register */

	// & operation because we want to transmit 8 bits
	USART2->TDR = (ch & 0xFF) ;
 800036a:	687b      	ldr	r3, [r7, #4]
 800036c:	b29a      	uxth	r2, r3
 800036e:	4b05      	ldr	r3, [pc, #20]	@ (8000384 <uart2_write+0x30>)
 8000370:	b2d2      	uxtb	r2, r2
 8000372:	b292      	uxth	r2, r2
 8000374:	851a      	strh	r2, [r3, #40]	@ 0x28

}
 8000376:	bf00      	nop
 8000378:	370c      	adds	r7, #12
 800037a:	46bd      	mov	sp, r7
 800037c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000380:	4770      	bx	lr
 8000382:	bf00      	nop
 8000384:	40004400 	.word	0x40004400

08000388 <uart2_read>:


char uart2_read(void) {
 8000388:	b480      	push	{r7}
 800038a:	af00      	add	r7, sp, #0

	/* Wait until read buffer is not empty */

	while (!(USART2->ISR & SR_RXNE)){}
 800038c:	bf00      	nop
 800038e:	4b07      	ldr	r3, [pc, #28]	@ (80003ac <uart2_read+0x24>)
 8000390:	69db      	ldr	r3, [r3, #28]
 8000392:	f003 0320 	and.w	r3, r3, #32
 8000396:	2b00      	cmp	r3, #0
 8000398:	d0f9      	beq.n	800038e <uart2_read+0x6>

	/* read data register */

	return (USART2->RDR & 0xFF);
 800039a:	4b04      	ldr	r3, [pc, #16]	@ (80003ac <uart2_read+0x24>)
 800039c:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800039e:	b29b      	uxth	r3, r3
 80003a0:	b2db      	uxtb	r3, r3

}
 80003a2:	4618      	mov	r0, r3
 80003a4:	46bd      	mov	sp, r7
 80003a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003aa:	4770      	bx	lr
 80003ac:	40004400 	.word	0x40004400

080003b0 <uart_set_baudrate>:


void uart_set_baudrate(USART_TypeDef *USARTx, uint32_t PeriphClk, uint32_t Baudrate ){
 80003b0:	b580      	push	{r7, lr}
 80003b2:	b084      	sub	sp, #16
 80003b4:	af00      	add	r7, sp, #0
 80003b6:	60f8      	str	r0, [r7, #12]
 80003b8:	60b9      	str	r1, [r7, #8]
 80003ba:	607a      	str	r2, [r7, #4]

	USARTx->BRR = compute_uart_BD( PeriphClk, Baudrate);
 80003bc:	6879      	ldr	r1, [r7, #4]
 80003be:	68b8      	ldr	r0, [r7, #8]
 80003c0:	f000 f808 	bl	80003d4 <compute_uart_BD>
 80003c4:	4603      	mov	r3, r0
 80003c6:	461a      	mov	r2, r3
 80003c8:	68fb      	ldr	r3, [r7, #12]
 80003ca:	60da      	str	r2, [r3, #12]


}
 80003cc:	bf00      	nop
 80003ce:	3710      	adds	r7, #16
 80003d0:	46bd      	mov	sp, r7
 80003d2:	bd80      	pop	{r7, pc}

080003d4 <compute_uart_BD>:

uint16_t compute_uart_BD(uint32_t PeriphClk, uint32_t Baudrate){
 80003d4:	b480      	push	{r7}
 80003d6:	b083      	sub	sp, #12
 80003d8:	af00      	add	r7, sp, #0
 80003da:	6078      	str	r0, [r7, #4]
 80003dc:	6039      	str	r1, [r7, #0]

	return ( (PeriphClk + (Baudrate/2U)) /Baudrate);
 80003de:	683b      	ldr	r3, [r7, #0]
 80003e0:	085a      	lsrs	r2, r3, #1
 80003e2:	687b      	ldr	r3, [r7, #4]
 80003e4:	441a      	add	r2, r3
 80003e6:	683b      	ldr	r3, [r7, #0]
 80003e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80003ec:	b29b      	uxth	r3, r3


}
 80003ee:	4618      	mov	r0, r3
 80003f0:	370c      	adds	r7, #12
 80003f2:	46bd      	mov	sp, r7
 80003f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003f8:	4770      	bx	lr
	...

080003fc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80003fc:	480d      	ldr	r0, [pc, #52]	@ (8000434 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80003fe:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000400:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000404:	480c      	ldr	r0, [pc, #48]	@ (8000438 <LoopForever+0x6>)
  ldr r1, =_edata
 8000406:	490d      	ldr	r1, [pc, #52]	@ (800043c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000408:	4a0d      	ldr	r2, [pc, #52]	@ (8000440 <LoopForever+0xe>)
  movs r3, #0
 800040a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800040c:	e002      	b.n	8000414 <LoopCopyDataInit>

0800040e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800040e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000410:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000412:	3304      	adds	r3, #4

08000414 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000414:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000416:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000418:	d3f9      	bcc.n	800040e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800041a:	4a0a      	ldr	r2, [pc, #40]	@ (8000444 <LoopForever+0x12>)
  ldr r4, =_ebss
 800041c:	4c0a      	ldr	r4, [pc, #40]	@ (8000448 <LoopForever+0x16>)
  movs r3, #0
 800041e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000420:	e001      	b.n	8000426 <LoopFillZerobss>

08000422 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000422:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000424:	3204      	adds	r2, #4

08000426 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000426:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000428:	d3fb      	bcc.n	8000422 <FillZerobss>


/* Call static constructors */
  bl __libc_init_array
 800042a:	f000 f811 	bl	8000450 <__libc_init_array>
/* Call the application's entry point.*/

  bl main
 800042e:	f7ff fed1 	bl	80001d4 <main>

08000432 <LoopForever>:

LoopForever:
  b LoopForever
 8000432:	e7fe      	b.n	8000432 <LoopForever>
  ldr   r0, =_estack
 8000434:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 8000438:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800043c:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000440:	080004b8 	.word	0x080004b8
  ldr r2, =_sbss
 8000444:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000448:	20000020 	.word	0x20000020

0800044c <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800044c:	e7fe      	b.n	800044c <ADC1_2_IRQHandler>
	...

08000450 <__libc_init_array>:
 8000450:	b570      	push	{r4, r5, r6, lr}
 8000452:	4d0d      	ldr	r5, [pc, #52]	@ (8000488 <__libc_init_array+0x38>)
 8000454:	4c0d      	ldr	r4, [pc, #52]	@ (800048c <__libc_init_array+0x3c>)
 8000456:	1b64      	subs	r4, r4, r5
 8000458:	10a4      	asrs	r4, r4, #2
 800045a:	2600      	movs	r6, #0
 800045c:	42a6      	cmp	r6, r4
 800045e:	d109      	bne.n	8000474 <__libc_init_array+0x24>
 8000460:	4d0b      	ldr	r5, [pc, #44]	@ (8000490 <__libc_init_array+0x40>)
 8000462:	4c0c      	ldr	r4, [pc, #48]	@ (8000494 <__libc_init_array+0x44>)
 8000464:	f000 f818 	bl	8000498 <_init>
 8000468:	1b64      	subs	r4, r4, r5
 800046a:	10a4      	asrs	r4, r4, #2
 800046c:	2600      	movs	r6, #0
 800046e:	42a6      	cmp	r6, r4
 8000470:	d105      	bne.n	800047e <__libc_init_array+0x2e>
 8000472:	bd70      	pop	{r4, r5, r6, pc}
 8000474:	f855 3b04 	ldr.w	r3, [r5], #4
 8000478:	4798      	blx	r3
 800047a:	3601      	adds	r6, #1
 800047c:	e7ee      	b.n	800045c <__libc_init_array+0xc>
 800047e:	f855 3b04 	ldr.w	r3, [r5], #4
 8000482:	4798      	blx	r3
 8000484:	3601      	adds	r6, #1
 8000486:	e7f2      	b.n	800046e <__libc_init_array+0x1e>
 8000488:	080004b0 	.word	0x080004b0
 800048c:	080004b0 	.word	0x080004b0
 8000490:	080004b0 	.word	0x080004b0
 8000494:	080004b4 	.word	0x080004b4

08000498 <_init>:
 8000498:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800049a:	bf00      	nop
 800049c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800049e:	bc08      	pop	{r3}
 80004a0:	469e      	mov	lr, r3
 80004a2:	4770      	bx	lr

080004a4 <_fini>:
 80004a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80004a6:	bf00      	nop
 80004a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80004aa:	bc08      	pop	{r3}
 80004ac:	469e      	mov	lr, r3
 80004ae:	4770      	bx	lr
